class Client:
    def __init__(self, client_id, region, microservices, demand):
        """
        Initialize a client.

        :param client_id: Unique identifier for the client.
        :param region: The geographic region of the client, represented as an integer (1-70).
        :param microservices: A list of microservices that the client interacts with.
        :param demand: The demand level generated by the client, could be quantified in requests per second or another metric.
        """
        self.client_id = client_id
        self.region = region
        self.microservices = microservices
        self.demand = demand
       
class ClientCluster:
    def __init__(self, region, microservices, total_demand, latency_requirement=150):
        """
        Initialize a client cluster.

        :param region: The geographic region this cluster represents.
        :param microservices: A list of microservices that clients in this cluster interact with, aggregated from individual clients.
        :param total_demand: The total demand generated by the clients in this cluster.
        :param latency_requirement: The maximum acceptable latency for the cluster, could be a derived or predetermined value.
        """
        self.region = region
        self.microservices = microservices
        self.total_demand = total_demand
        self.latency_requirement = latency_requirement


class ClientGraph:
    def __init__(self):
        self.clients = {}
        self.distances = {}  # distances[client_id][server_id] = distance

    def add_client(self, client):
        """
        Add a client cluster to the graph.

        :param client: An instance of ClientCluster.
        """
        self.clients[client.client_id] = client
        self.distances[client.client_id] = {}

    def set_distance(self, client_id, server_id, distance):
        """
        Set the distance between a client cluster and a server.

        :param client_id: The client cluster's ID.
        :param server_id: The server's ID.
        :param distance: The distance (could represent latency or geographical distance).
        """
        if client_id not in self.distances:
            self.distances[client_id] = {}
        self.distances[client_id][server_id] = distance

